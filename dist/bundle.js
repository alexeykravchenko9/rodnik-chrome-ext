!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:o})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);var o=class{constructor(){}static getDataTab(){let e=[],t={summ:0,savinings:0,currentPage:""};console.log(window);let{summ:n,savinings:o}=t,r=(window.location.href.split("&"),document.querySelectorAll(".operations-table thead tr th")),a=document.querySelectorAll(".operations-table tbody tr");Object.keys(r).forEach((t,n)=>e.push(r[n].innerText));const s=e.indexOf("Скидка, грн"),i=e.indexOf("Сумма");return Object.keys(a).forEach((e,n)=>{t.summ+=Math.round(a[n].children[i].innerText),t.savinings+=Math.round(a[n].children[s].innerText)}),console.log(`Сумма - ${n} грн`),console.log(`Скидка - ${o} грн`),console.log(t),t}static printHtml(e){const t=document.createElement("div");t.className="b-rodnikStats-bar",t.innerHTML=`<p>Сумма - ${e.summ} грн</p><p>Скидка - ${e.savinings} грн</p>`;const n=document.querySelector("table.operations-table").parentNode,o=document.querySelector("table.operations-table");n.insertBefore(t,o)}};(class{constructor(e){this.name=e}static view(){const{host:e,pathname:t}=window.location;if("my.rodnik.ua"===e&&"/operations"==t){let e=o.getDataTab();o.printHtml(e)}else console.log("Please, move to the Operations page.")}static model(){}}).view()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,