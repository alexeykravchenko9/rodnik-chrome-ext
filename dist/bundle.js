!function(e){var t={};function o(a){if(t[a])return t[a].exports;var n=t[a]={i:a,l:!1,exports:{}};return e[a].call(n.exports,n,n.exports,o),n.l=!0,n.exports}o.m=e,o.c=t,o.d=function(e,t,a){o.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:a})},o.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=0)}([function(e,t,o){"use strict";o.r(t);const a=e=>{let t=window.location.href.split("&").filter(t=>t.indexOf(e)>=0?t:"").toString().split("=");return t[t.length-1]},n=e=>console.log(e);var l=class{constructor(){}static getDataTab(){let e=[],t=window.location.href.split("&"),o={summ_page:0,savinings:0,allSumm:0,allSavinings:0,startDate:a("startDate"),endDate:a("endDate"),currentPage:t[t.length-1].indexOf("page")>=0?t[t.length-1]:"page=1"},n=document.querySelectorAll(".operations-table thead tr th"),l=document.querySelectorAll(".operations-table tbody tr");Object.keys(n).forEach((t,o)=>e.push(n[o].innerText));const r=e.indexOf("Скидка, грн"),i=e.indexOf("Сумма");Object.keys(l).forEach((e,t)=>{o.summ_page+=Math.round(l[t].children[i].innerText),o.savinings+=Math.round(l[t].children[r].innerText)});let{summ_page:s,savinings:c}=o;o.allSumm+=s,o.allSavinings+=c;let{allSumm:g,allSavinings:u}=o;return console.log(`Сумма - ${s} грн`),console.log(`Скидка - ${c} грн`),console.log(`Общая сумма - ${g} грн`),console.log(`Суммарная скидка - ${u} грн`),console.log(o),o}static printHtml(e){let t=parseInt(localStorage.getItem("rodnik-ext-allSavinigs")),o=parseInt(localStorage.getItem("rodnik-ext-allSumm"));const a=document.createElement("div");a.className="b-rodnikStats-bar",a.innerHTML=`<p>Общая сумма - ${o} грн</p>\n                         <p>Суммарная скидка - ${t} грн</p>`;const n=document.querySelector("table.operations-table").parentNode,l=document.querySelector("table.operations-table");n.insertBefore(a,l)}};var r=class{constructor(){}static addToStorage(e,t){const{savinings:o,summ_page:a}=e;if(null!==localStorage.getItem("rodnik-ext-allSavinigs")&&null!==localStorage.getItem("rodnik-ext-allSumm")){let e=parseInt(localStorage.getItem("rodnik-ext-allSavinigs")),t=parseInt(localStorage.getItem("rodnik-ext-allSumm"));localStorage.setItem("rodnik-ext-allSavinigs",e+=o),localStorage.setItem("rodnik-ext-allSumm",t+=a)}else localStorage.setItem("rodnik-ext-allSavinigs",o),localStorage.setItem("rodnik-ext-allSumm",a);const n=JSON.stringify(e);this.localKey=t,localStorage.setItem(this.localKey,n)}static getFromStorage(e){return JSON.parse(localStorage.getItem(e))}};o.d(t,"EVENTTAGS",function(){return i});const i={tags:"#datepicker span.btn",id:["dateRangePreset","locationSelect","operationTypeSelect"]},s=new class{constructor(){}init(){let e=r.getFromStorage(`rodnik-ext-page=${a("page")}`);if(null===this.localStorageData){let e=l.getDataTab();r.addToStorage(e,`rodnik-ext-page=${a("page")}`),l.printHtml(r.getFromStorage(`rodnik-ext-page=${a("page")}`))}else l.printHtml(e);n(i)}};document.querySelectorAll(".operations-table tbody tr").length>0?s.init():window.localStorage.clear()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,